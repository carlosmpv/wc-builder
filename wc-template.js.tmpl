{{ define "wc" }}
    let {{ .ElementNameCC }}Template = document.createElement('template');
    {{ .ElementNameCC }}Template.innerHTML = `{{ .View }}`;

    {{ .UDB }}
    window.customElements.define('{{ .ElementNameKC }}', class extends HTMLElement { 
        constructor() { 
            super();
            let shadowRoot = this.attachShadow({ mode: 'open' });
            shadowRoot.appendChild({{ .ElementNameCC }}Template.content.cloneNode(true));
            this.state = new {{ .ElementNameCC }}(shadowRoot);
        }
        
        connectedCallback() { 
            this.state.connectedCallback(); 
        }
        
        disconnectedCallback() {
            this.state.disconnectedCallback(); 
        }
        
        attributeChangedCallback(attribute, previousValue, currentValue) {
            this.state.attributeChangedCallback(attribute, previousValue, currentValue);
        }
        
        static get observedAttributes() { 
            return {{ .ElementNameCC }}.observedAttributes; 
        }
    });
{{ end }}